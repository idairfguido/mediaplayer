/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * TelaPrincipal.java
 *
 * Created on 29/01/2010, 08:46:58
 */
package visao;

import persistencia.Banco;
import controle.MediaPlayer;
import java.awt.Desktop;
import java.awt.Image;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import modelo.Album;
import visao.componentes.ETableModel;
import visao.componentes.GListModel;
import visao.componentes.GTableModel;
import visao.componentes.GTableModelAlbuns;
import modelo.Musica;
import modelo.PlayList;
import persistencia.AlbumDAO;
import persistencia.ListaDAO;
import persistencia.MusicaDAO;
import util.Tempo;

/**
 *
 * @author Idair F. Guido
 */
public class JFTelaPrincipal extends javax.swing.JFrame {

    private MediaPlayer player;
    private GTableModel modeloTabela = new GTableModel();
    private ETableModel modeloExecucao = new ETableModel();
    private GListModel modeloLista = new GListModel();
    private GTableModelAlbuns modeloTabelaAlbuns = new GTableModelAlbuns();
    private DefaultListModel modeloList = new DefaultListModel();

    private boolean listas = true;
    private boolean biblioteca = false;
    private boolean musicas = true;

    /**
     * Creates new form TelaPrincipal
     */
    public JFTelaPrincipal(MediaPlayer player) {
        this.player = player;
        setaIcon();
        initComponents();
        jsProgresso.setValue(0);
        jsVolume.setMinimum(0);
        jsVolume.setMaximum(100);
        setaIconVolume();
        if (MusicaDAO.servidorVazio()) {
            jlPrimeiraVez.setText("Adicione algumas Musicas para começar.");
        }
        try {
            UIManager.setLookAndFeel("com.nilo.plaf.nimrod.NimRODLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.updateComponentTreeUI(this);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane2.setOneTouchExpandable(true);
        carregaMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPrincipal = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jpEsquerdo = new javax.swing.JPanel();
        jcbRepetir = new javax.swing.JCheckBox();
        jcbAleatorio = new javax.swing.JCheckBox();
        jcbSequencia = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlMenu = new javax.swing.JList();
        jpDireito = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jpDireitoTop = new javax.swing.JPanel();
        jpPesquisa = new javax.swing.JPanel();
        jtfPesquisa = new javax.swing.JTextField();
        jlPrimeiraVez = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtMusicas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jpDireitoDown2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jtfNomeLista = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMusicasExecucao = new javax.swing.JTable();
        jlPlayListInfo = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbLimpa = new javax.swing.JButton();
        jbExclui = new javax.swing.JButton();
        jpControles = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbPlayPause = new javax.swing.JButton();
        jbAnterior = new javax.swing.JButton();
        jbStop = new javax.swing.JButton();
        jbProximo = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jsProgresso = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jbMiniPlayer = new javax.swing.JButton();
        jsVolume = new javax.swing.JSlider();
        jlProgresso = new javax.swing.JLabel();
        jlVolume = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmArquivo = new javax.swing.JMenu();
        jmiAdicionar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiPropriedades = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiAddMusicasSelecionadas = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jmiLimpar = new javax.swing.JMenuItem();
        jmiSalvar = new javax.swing.JMenuItem();
        jmiRenomear = new javax.swing.JMenuItem();
        jmiExcluir = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiSair = new javax.swing.JMenuItem();
        jmExecutar = new javax.swing.JMenu();
        jmiPlayPause = new javax.swing.JMenuItem();
        jmiStop = new javax.swing.JMenuItem();
        jmiProxima = new javax.swing.JMenuItem();
        jmiAnterior = new javax.swing.JMenuItem();
        jmOpcoes = new javax.swing.JMenu();
        jmVolume = new javax.swing.JMenu();
        jmiAumentar = new javax.swing.JMenuItem();
        jmiDiminuir = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jcbmiSequencia = new javax.swing.JCheckBoxMenuItem();
        jcbmiAleatorio = new javax.swing.JCheckBoxMenuItem();
        jcbmiRepetir = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiPreferencias = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiMiniPlayer = new javax.swing.JMenuItem();
        jmAjuda = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jmiContAjuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Guido's Media Player");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jcbRepetir.setText("Repetir");
        jcbRepetir.setToolTipText("Selecionado permite a repetição das musicas.");
        jcbRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRepetirActionPerformed(evt);
            }
        });

        jcbAleatorio.setText("Aleatório");
        jcbAleatorio.setToolTipText("Selecionado ativa execução aleatória.");
        jcbAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAleatorioActionPerformed(evt);
            }
        });

        jcbSequencia.setText("Sequencia");
        jcbSequencia.setToolTipText("Selecionado ativa execução em sequencia");
        jcbSequencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSequenciaActionPerformed(evt);
            }
        });

        jlMenu.setModel(modeloList);
        jlMenu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlMenuMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jlMenu);

        javax.swing.GroupLayout jpEsquerdoLayout = new javax.swing.GroupLayout(jpEsquerdo);
        jpEsquerdo.setLayout(jpEsquerdoLayout);
        jpEsquerdoLayout.setHorizontalGroup(
            jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEsquerdoLayout.createSequentialGroup()
                .addGroup(jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jcbAleatorio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbRepetir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbSequencia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
        );
        jpEsquerdoLayout.setVerticalGroup(
            jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpEsquerdoLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbSequencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbAleatorio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbRepetir))
        );

        jSplitPane1.setLeftComponent(jpEsquerdo);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jpDireitoTop.setMinimumSize(new java.awt.Dimension(100, 250));
        jpDireitoTop.setPreferredSize(new java.awt.Dimension(565, 300));

        jtfPesquisa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfPesquisa.setText("Pesquisa");
        jtfPesquisa.setToolTipText("Digite o nome de uma Musica ou parte de um nome para pesquisar.");
        jtfPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfPesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPesquisaFocusLost(evt);
            }
        });
        jtfPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPesquisaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jpPesquisaLayout = new javax.swing.GroupLayout(jpPesquisa);
        jpPesquisa.setLayout(jpPesquisaLayout);
        jpPesquisaLayout.setHorizontalGroup(
            jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPesquisaLayout.createSequentialGroup()
                .addComponent(jlPrimeiraVez, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpPesquisaLayout.setVerticalGroup(
            jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jlPrimeiraVez, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jtMusicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtMusicas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtMusicas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtMusicasMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtMusicas);

        javax.swing.GroupLayout jpDireitoTopLayout = new javax.swing.GroupLayout(jpDireitoTop);
        jpDireitoTop.setLayout(jpDireitoTopLayout);
        jpDireitoTopLayout.setHorizontalGroup(
            jpDireitoTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
        );
        jpDireitoTopLayout.setVerticalGroup(
            jpDireitoTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireitoTopLayout.createSequentialGroup()
                .addComponent(jpPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
        );

        jSplitPane2.setTopComponent(jpDireitoTop);

        jtfNomeLista.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfNomeLista.setText("PlayList em Execução");
        jtfNomeLista.setToolTipText("Nome da PlayList em execução.");
        jtfNomeLista.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfNomeListaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfNomeListaFocusLost(evt);
            }
        });
        jtfNomeLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfNomeListaKeyReleased(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/6971_16x16.png"))); // NOI18N
        jButton1.setToolTipText("Proxima PlayList");
        jButton1.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/6970_16x16.png"))); // NOI18N
        jButton2.setToolTipText("PlayList Anterior");
        jButton2.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton2.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton2.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfNomeLista, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jtfNomeLista, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jtMusicasExecucao.setModel(modeloExecucao);
        jtMusicasExecucao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMusicasExecucaoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtMusicasExecucao);

        jlPlayListInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlPlayListInfo.setToolTipText("Musicas da PlayList / Duração total");

        jbAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/6972_16x16.png"))); // NOI18N
        jbAdd.setToolTipText("Adicionar totas as musicas selecionadas (Alt + M)");
        jbAdd.setMaximumSize(new java.awt.Dimension(25, 25));
        jbAdd.setMinimumSize(new java.awt.Dimension(25, 25));
        jbAdd.setPreferredSize(new java.awt.Dimension(25, 25));
        jbAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbAddMouseClicked(evt);
            }
        });

        jbLimpa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/exclui.png"))); // NOI18N
        jbLimpa.setToolTipText("Limpar Lista em Execução (Ctrl + L)");
        jbLimpa.setMaximumSize(new java.awt.Dimension(25, 25));
        jbLimpa.setMinimumSize(new java.awt.Dimension(25, 25));
        jbLimpa.setPreferredSize(new java.awt.Dimension(25, 25));
        jbLimpa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbLimpaMouseClicked(evt);
            }
        });

        jbExclui.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/5034_128x128.png"))); // NOI18N
        jbExclui.setToolTipText("Excluir PlayList (Ctrl + E)");
        jbExclui.setMaximumSize(new java.awt.Dimension(25, 25));
        jbExclui.setMinimumSize(new java.awt.Dimension(25, 25));
        jbExclui.setPreferredSize(new java.awt.Dimension(25, 25));
        jbExclui.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbExcluiMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jpDireitoDown2Layout = new javax.swing.GroupLayout(jpDireitoDown2);
        jpDireitoDown2.setLayout(jpDireitoDown2Layout);
        jpDireitoDown2Layout.setHorizontalGroup(
            jpDireitoDown2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireitoDown2Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbLimpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbExclui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(jlPlayListInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
        );
        jpDireitoDown2Layout.setVerticalGroup(
            jpDireitoDown2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireitoDown2Layout.createSequentialGroup()
                .addGroup(jpDireitoDown2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDireitoDown2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlPlayListInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jbAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbLimpa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExclui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 731, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpDireitoDown2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 161, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(jpDireitoDown2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jSplitPane2.setRightComponent(jPanel2);

        javax.swing.GroupLayout jpDireitoLayout = new javax.swing.GroupLayout(jpDireito);
        jpDireito.setLayout(jpDireitoLayout);
        jpDireitoLayout.setHorizontalGroup(
            jpDireitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
        );
        jpDireitoLayout.setVerticalGroup(
            jpDireitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jpDireito);

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 954, Short.MAX_VALUE)
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/play.png"))); // NOI18N
        jbPlayPause.setToolTipText("Play");
        jbPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPlayPauseActionPerformed(evt);
            }
        });
        jPanel3.add(jbPlayPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 48, -1));

        jbAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/voltar.png"))); // NOI18N
        jbAnterior.setToolTipText("Anterior");
        jbAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnteriorActionPerformed(evt);
            }
        });
        jPanel3.add(jbAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 50, -1));

        jbStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/stop.png"))); // NOI18N
        jbStop.setToolTipText("Stop");
        jbStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStopActionPerformed(evt);
            }
        });
        jPanel3.add(jbStop, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 48, -1));

        jbProximo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/proximo.png"))); // NOI18N
        jbProximo.setToolTipText("Proxima");
        jbProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbProximoActionPerformed(evt);
            }
        });
        jPanel3.add(jbProximo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 52, -1));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsProgresso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 954, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsProgresso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jbMiniPlayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/application_get_Mini.png"))); // NOI18N
        jbMiniPlayer.setToolTipText("MiniPlayer");
        jbMiniPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMiniPlayerActionPerformed(evt);
            }
        });

        jsVolume.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jsVolumeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jsVolumeMouseReleased(evt);
            }
        });
        jsVolume.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jsVolumeMouseDragged(evt);
            }
        });

        jlProgresso.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jsVolume, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbMiniPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jlProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbMiniPlayer)
                    .addComponent(jsVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jlProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jpControlesLayout = new javax.swing.GroupLayout(jpControles);
        jpControles.setLayout(jpControlesLayout);
        jpControlesLayout.setHorizontalGroup(
            jpControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpControlesLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 515, Short.MAX_VALUE)
                .addComponent(jlVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpControlesLayout.setVerticalGroup(
            jpControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpControlesLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jmArquivo.setText("Arquivo");

        jmiAdicionar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAdicionar.setText("Adicionar");
        jmiAdicionar.setToolTipText("Adicionar Musicas a Biblioteca.");
        jmiAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAdicionarActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiAdicionar);
        jmArquivo.add(jSeparator1);

        jmiPropriedades.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPropriedades.setText("Propriedades");
        jmiPropriedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPropriedadesActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiPropriedades);
        jmArquivo.add(jSeparator6);

        jmiAddMusicasSelecionadas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jmiAddMusicasSelecionadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/6972_16x16.png"))); // NOI18N
        jmiAddMusicasSelecionadas.setText("Adicionar Musicas Selecionadas");
        jmiAddMusicasSelecionadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddMusicasSelecionadasActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiAddMusicasSelecionadas);
        jmArquivo.add(jSeparator7);

        jmiLimpar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/exclui.png"))); // NOI18N
        jmiLimpar.setText("Limpar PlayList");
        jmiLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLimparActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiLimpar);

        jmiSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSalvar.setText("Salvar PlayList");
        jmiSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalvarActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiSalvar);

        jmiRenomear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiRenomear.setText("Renomear PlayList");
        jmiRenomear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRenomearActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiRenomear);

        jmiExcluir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/3695_128x128.png"))); // NOI18N
        jmiExcluir.setText("Excluir PlayList");
        jmiExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExcluirActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiExcluir);
        jmArquivo.add(jSeparator2);

        jmiSair.setText("Sair");
        jmiSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSairActionPerformed(evt);
            }
        });
        jmArquivo.add(jmiSair);

        jMenuBar1.add(jmArquivo);

        jmExecutar.setText("Executar");

        jmiPlayPause.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPlayPause.setText("Play / Pause");
        jmiPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPlayPauseActionPerformed(evt);
            }
        });
        jmExecutar.add(jmiPlayPause);

        jmiStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiStop.setText("Stop");
        jmiStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiStopActionPerformed(evt);
            }
        });
        jmExecutar.add(jmiStop);

        jmiProxima.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiProxima.setText("Proxima Musica");
        jmiProxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiProximaActionPerformed(evt);
            }
        });
        jmExecutar.add(jmiProxima);

        jmiAnterior.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAnterior.setText("Musica Anterior");
        jmiAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAnteriorActionPerformed(evt);
            }
        });
        jmExecutar.add(jmiAnterior);

        jMenuBar1.add(jmExecutar);

        jmOpcoes.setText("Opcões");

        jmVolume.setText("Volume");

        jmiAumentar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAumentar.setText("Aumentar");
        jmiAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAumentarActionPerformed(evt);
            }
        });
        jmVolume.add(jmiAumentar);

        jmiDiminuir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiDiminuir.setText("Diminuir");
        jmiDiminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDiminuirActionPerformed(evt);
            }
        });
        jmVolume.add(jmiDiminuir);

        jmOpcoes.add(jmVolume);
        jmOpcoes.add(jSeparator4);

        jcbmiSequencia.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jcbmiSequencia.setText("Sequencia");
        jcbmiSequencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbmiSequenciaActionPerformed(evt);
            }
        });
        jmOpcoes.add(jcbmiSequencia);

        jcbmiAleatorio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jcbmiAleatorio.setText("Aleatório");
        jcbmiAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbmiAleatorioActionPerformed(evt);
            }
        });
        jmOpcoes.add(jcbmiAleatorio);

        jcbmiRepetir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jcbmiRepetir.setText("Repetir");
        jcbmiRepetir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbmiRepetirActionPerformed(evt);
            }
        });
        jmOpcoes.add(jcbmiRepetir);
        jmOpcoes.add(jSeparator3);

        jmiPreferencias.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPreferencias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/4970_128x128.png"))); // NOI18N
        jmiPreferencias.setText("Preferências");
        jmiPreferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPreferenciasActionPerformed(evt);
            }
        });
        jmOpcoes.add(jmiPreferencias);
        jmOpcoes.add(jSeparator5);

        jmiMiniPlayer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiMiniPlayer.setText("MiniPlayer");
        jmiMiniPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiMiniPlayerActionPerformed(evt);
            }
        });
        jmOpcoes.add(jmiMiniPlayer);

        jMenuBar1.add(jmOpcoes);

        jmAjuda.setText("Ajuda");
        jmAjuda.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setText("Sobre");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jmAjuda.add(jMenuItem8);

        jmiContAjuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiContAjuda.setText("Conteudo de Ajuda");
        jmiContAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiContAjudaActionPerformed(evt);
            }
        });
        jmAjuda.add(jmiContAjuda);

        jMenuBar1.add(jmAjuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpControles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(970, 564));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//        Banco.disconect();
    }//GEN-LAST:event_formWindowClosing

    private void jtfPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPesquisaFocusGained
        jtfPesquisa.setText("");
    }//GEN-LAST:event_jtfPesquisaFocusGained

    private void jtfPesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPesquisaFocusLost
        jtfPesquisa.setText("Pesquisa");
    }//GEN-LAST:event_jtfPesquisaFocusLost

    private void jbMiniPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMiniPlayerActionPerformed
        player.estanciaMiniPlayer();
    }//GEN-LAST:event_jbMiniPlayerActionPerformed

    private void jsVolumeMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsVolumeMouseDragged
        setVolumeSystem(jsVolume.getValue());
    }//GEN-LAST:event_jsVolumeMouseDragged

    private void jtfPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaKeyReleased
        if (jlMenu.getSelectedIndex() == -1) {
            if (musicas) {
                jlMenu.setSelectedIndex(modeloList.indexOf(" - Musicas"));
            } else {
                jlMenu.setSelectedIndex(modeloList.indexOf(" + Musicas"));
            }
        }
        if (jlMenu.getSelectedValue().equals(" - Albuns")) {
            procuraAlbum();
        } else {
            procuraMusica();
        }
    }//GEN-LAST:event_jtfPesquisaKeyReleased

    private void jtMusicasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMusicasMouseReleased
        if (evt.getClickCount() == 2) {
            if (jlMenu.getSelectedValue().equals(" - Albuns")) {
                int posicao = jtMusicas.getSelectedRow();
                Album album = modeloTabelaAlbuns.getObjeto(posicao);
                List<Musica> result = MusicaDAO.localizar("album", album.getTitulo());
                modeloTabela.setListaObjetos(result);
                jtMusicas.setModel(modeloTabela);
                jtMusicas.updateUI();
                if (musicas) {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" - Musicas"));
                } else {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" + Musicas"));
                }
            } else {
                AddMusicasSelecionadas();
            }
        }
    }//GEN-LAST:event_jtMusicasMouseReleased

    private void jmiLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLimparActionPerformed
        limparPlayList();
    }//GEN-LAST:event_jmiLimparActionPerformed

    private void jlMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlMenuMouseClicked
        atualizaMenu(evt.getClickCount());
    }//GEN-LAST:event_jlMenuMouseClicked

    private void jmiMiniPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiMiniPlayerActionPerformed
        player.estanciaMiniPlayer();
    }//GEN-LAST:event_jmiMiniPlayerActionPerformed

    private void jmiPreferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPreferenciasActionPerformed
        player.estanciaOpcoes();
    }//GEN-LAST:event_jmiPreferenciasActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        player.estanciaSobre();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jbPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPlayPauseActionPerformed
        try {
            if (modeloExecucao.getRowCount() > 0) {
                int posicao = jtMusicasExecucao.getSelectedRow();
                if (posicao == -1) {
                    player.play(0);
                } else {
                    player.play(posicao);
                }
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbPlayPauseActionPerformed

    private void jbStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStopActionPerformed
        if (player.isExecutando())
            player.stop();
    }//GEN-LAST:event_jbStopActionPerformed

    private void jtfNomeListaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNomeListaFocusGained
        if (player.listaExecutando != null) {

        } else {
            jtfNomeLista.setText("");
        }
}//GEN-LAST:event_jtfNomeListaFocusGained

    private void jtfNomeListaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNomeListaFocusLost
        if (player.listaExecutando != null) {
            jtfNomeLista.setText(player.listaExecutando.getTitulo());
        } else {
            jtfNomeLista.setText("PlayList sem Nome");
        }
}//GEN-LAST:event_jtfNomeListaFocusLost

    private void jtMusicasExecucaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMusicasExecucaoMouseClicked
        if (evt.getClickCount() == 2) {
            if (modeloExecucao.getRowCount() > 0) {
                try {
                    if (player.isExecutando()) {
                        player.stop();
                    }
                    int posicao = jtMusicasExecucao.getSelectedRow();
                    player.play(posicao);
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
}//GEN-LAST:event_jtMusicasExecucaoMouseClicked

    private void jbAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnteriorActionPerformed
        try {
            if (player.isExecutando()) {
                player.musicaAnt();
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbAnteriorActionPerformed

    private void jbProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbProximoActionPerformed
        try {
            if (player.isExecutando()) {
                player.proxMusica();
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbProximoActionPerformed

    private void jcbmiSequenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbmiSequenciaActionPerformed
        jcbSequencia.setSelected(jcbmiSequencia.isSelected());
        jcbAleatorio.setSelected(false);
        jcbmiAleatorio.setSelected(false);
        player.setAleatorio(jcbAleatorio.isSelected());
        player.setSequencia(jcbSequencia.isSelected());
    }//GEN-LAST:event_jcbmiSequenciaActionPerformed

    private void jcbmiAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbmiAleatorioActionPerformed
        jcbAleatorio.setSelected(jcbmiAleatorio.isSelected());
        jcbSequencia.setSelected(false);
        jcbmiSequencia.setSelected(false);
        player.setSequencia(jcbSequencia.isSelected());
        player.setAleatorio(jcbAleatorio.isSelected());
    }//GEN-LAST:event_jcbmiAleatorioActionPerformed

    private void jcbmiRepetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbmiRepetirActionPerformed
        jcbRepetir.setSelected(jcbmiRepetir.isSelected());
        player.setRepetir(jcbmiRepetir.isSelected());
        System.out.println(player.isRepetir());
    }//GEN-LAST:event_jcbmiRepetirActionPerformed

    private void jcbSequenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSequenciaActionPerformed
        jcbmiSequencia.setSelected(jcbSequencia.isSelected());
        jcbAleatorio.setSelected(false);
        jcbmiAleatorio.setSelected(false);
        player.setAleatorio(jcbAleatorio.isSelected());
        player.setSequencia(jcbSequencia.isSelected());
    }//GEN-LAST:event_jcbSequenciaActionPerformed

    private void jcbAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAleatorioActionPerformed
        jcbmiAleatorio.setSelected(jcbAleatorio.isSelected());
        jcbSequencia.setSelected(false);
        jcbmiSequencia.setSelected(false);
        player.setSequencia(jcbSequencia.isSelected());
        player.setAleatorio(jcbAleatorio.isSelected());
    }//GEN-LAST:event_jcbAleatorioActionPerformed

    private void jcbRepetirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRepetirActionPerformed
        jcbmiRepetir.setSelected(jcbRepetir.isSelected());
        player.setRepetir(jcbRepetir.isSelected());
        System.out.println(player.isRepetir());
    }//GEN-LAST:event_jcbRepetirActionPerformed

    private void jmiSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSairActionPerformed
        int opcao = JOptionPane.showOptionDialog(this, "Deseja Sair?", "Saindo!!", 0, 3, null, null, false);
        if (opcao == 0) {
//            Banco.disconect();
            System.exit(EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_jmiSairActionPerformed

    private void jmiAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAdicionarActionPerformed
        try {
            if (modeloTabela.getRowCount() > 0) {
                modeloTabela.removeAllElements();
            }
            player.adicionaArquivo();
            if (modeloTabela.getRowCount() > 0) {
                jtMusicas.setModel(modeloTabela);
                jtMusicas.updateUI();
                jlPrimeiraVez.setText("");
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiAdicionarActionPerformed

    private void jmiPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPlayPauseActionPerformed
        try {
            if (modeloExecucao.getRowCount() > 0) {
                int posicao = jtMusicasExecucao.getSelectedRow();
                player.play(posicao);
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiPlayPauseActionPerformed

    private void jmiStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiStopActionPerformed
        if (player.isExecutando())
            player.stop();
    }//GEN-LAST:event_jmiStopActionPerformed

    private void jmiProximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiProximaActionPerformed
        try {
            if (!player.playListIsEmpty()) {
                player.proxMusica();
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiProximaActionPerformed

    private void jmiAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAnteriorActionPerformed
        try {
            if (!player.playListIsEmpty()) {
                player.musicaAnt();
            }
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(JFTelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiAnteriorActionPerformed

    private void jmiAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAumentarActionPerformed
        int valor = jsVolume.getValue();
        if (valor <= 100) {
            setVolumeSystem(valor + 10);
            System.out.println(valor);
        }
    }//GEN-LAST:event_jmiAumentarActionPerformed

    private void jmiDiminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDiminuirActionPerformed
        int valor = jsVolume.getValue();
        if (valor >= 0) {
            setVolumeSystem(valor - 10);
        }
    }//GEN-LAST:event_jmiDiminuirActionPerformed

    private void jmiPropriedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPropriedadesActionPerformed
        player.esstanciaInformacoesMusica();
    }//GEN-LAST:event_jmiPropriedadesActionPerformed

    private void jtfNomeListaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeListaKeyReleased
        if (evt.getKeyCode() == 10) {
            if ((jtfNomeLista.getText().equals("")) || (jtfNomeLista.getText().equals(null)) || (modeloExecucao.getRowCount() < 1)) {

            } else {
                player.salvaPlayList(jtfNomeLista.getText());
                modeloList.clear();
                biblioteca = false;
                listas = true;
                carregaMenu();
                jtfNomeLista.setText(player.listaExecutando.getTitulo());
                jlMenu.setSelectedIndex(modeloList.indexOf("   " + jtfNomeLista.getText()));
            }
        }

    }//GEN-LAST:event_jtfNomeListaKeyReleased

    private void jmiExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExcluirActionPerformed
        excluiPlayList();
    }//GEN-LAST:event_jmiExcluirActionPerformed

    private void jmiContAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiContAjudaActionPerformed
        try {
            URI uri = new URI("http://www.google.com.br");
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            if (desktop != null) {
                desktop.browse(uri);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (URISyntaxException use) {
            use.printStackTrace();
        }
    }//GEN-LAST:event_jmiContAjudaActionPerformed

    private void jbAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbAddMouseClicked
        AddMusicasSelecionadas();
    }//GEN-LAST:event_jbAddMouseClicked

    private void jbLimpaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbLimpaMouseClicked
        limparPlayList();
    }//GEN-LAST:event_jbLimpaMouseClicked

    private void jmiAddMusicasSelecionadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddMusicasSelecionadasActionPerformed
        AddMusicasSelecionadas();
    }//GEN-LAST:event_jmiAddMusicasSelecionadasActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.out.println("Nada Implementado aqui.");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Nada Implementado aqui.");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jmiSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalvarActionPerformed
        player.salvaPlayList(jtfNomeLista.getText());
    }//GEN-LAST:event_jmiSalvarActionPerformed

    private void jmiRenomearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRenomearActionPerformed
        System.out.println("Nada Implementado aqui.");
    }//GEN-LAST:event_jmiRenomearActionPerformed

    private void jsVolumeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsVolumeMouseReleased
        setVolumeSystem(jsVolume.getValue());
    }//GEN-LAST:event_jsVolumeMouseReleased

    private void jbExcluiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbExcluiMouseClicked
        excluiPlayList();
    }//GEN-LAST:event_jbExcluiMouseClicked

    private void jsVolumeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsVolumeMousePressed
        setVolumeSystem(jsVolume.getValue());
    }//GEN-LAST:event_jsVolumeMousePressed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TelaPrincipal().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAnterior;
    private javax.swing.JButton jbExclui;
    private javax.swing.JButton jbLimpa;
    private javax.swing.JButton jbMiniPlayer;
    private javax.swing.JButton jbPlayPause;
    private javax.swing.JButton jbProximo;
    private javax.swing.JButton jbStop;
    private javax.swing.JCheckBox jcbAleatorio;
    private javax.swing.JCheckBox jcbRepetir;
    private javax.swing.JCheckBox jcbSequencia;
    private javax.swing.JCheckBoxMenuItem jcbmiAleatorio;
    private javax.swing.JCheckBoxMenuItem jcbmiRepetir;
    private javax.swing.JCheckBoxMenuItem jcbmiSequencia;
    private javax.swing.JList jlMenu;
    private javax.swing.JLabel jlPlayListInfo;
    private javax.swing.JLabel jlPrimeiraVez;
    private javax.swing.JLabel jlProgresso;
    private javax.swing.JLabel jlVolume;
    private javax.swing.JMenu jmAjuda;
    private javax.swing.JMenu jmArquivo;
    private javax.swing.JMenu jmExecutar;
    private javax.swing.JMenu jmOpcoes;
    private javax.swing.JMenu jmVolume;
    private javax.swing.JMenuItem jmiAddMusicasSelecionadas;
    private javax.swing.JMenuItem jmiAdicionar;
    private javax.swing.JMenuItem jmiAnterior;
    private javax.swing.JMenuItem jmiAumentar;
    private javax.swing.JMenuItem jmiContAjuda;
    private javax.swing.JMenuItem jmiDiminuir;
    private javax.swing.JMenuItem jmiExcluir;
    private javax.swing.JMenuItem jmiLimpar;
    private javax.swing.JMenuItem jmiMiniPlayer;
    private javax.swing.JMenuItem jmiPlayPause;
    private javax.swing.JMenuItem jmiPreferencias;
    private javax.swing.JMenuItem jmiPropriedades;
    private javax.swing.JMenuItem jmiProxima;
    private javax.swing.JMenuItem jmiRenomear;
    private javax.swing.JMenuItem jmiSair;
    private javax.swing.JMenuItem jmiSalvar;
    private javax.swing.JMenuItem jmiStop;
    private javax.swing.JPanel jpControles;
    private javax.swing.JPanel jpDireito;
    private javax.swing.JPanel jpDireitoDown2;
    private javax.swing.JPanel jpDireitoTop;
    private javax.swing.JPanel jpEsquerdo;
    private javax.swing.JPanel jpPesquisa;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JSlider jsProgresso;
    private javax.swing.JSlider jsVolume;
    private javax.swing.JTable jtMusicas;
    private javax.swing.JTable jtMusicasExecucao;
    private javax.swing.JTextField jtfNomeLista;
    private javax.swing.JTextField jtfPesquisa;
    // End of variables declaration//GEN-END:variables

    public void setaIcon() {
        Image img = new ImageIcon(getClass().getResource("/visao/icones/picon.png")).getImage().getScaledInstance(64, 64, Image.SCALE_DEFAULT);
        this.setIconImage(img);
//        JPanel bg = new PlanoDeFundo("/visao/imagens/PlanoDeFundoMiniPlayer.jpg");
//        this.setContentPane(bg);
    }

    public void setaIconVolume() {
        if (jsVolume.getValue() > 0) {
            jlVolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/cSom.png")));
        } else {
            jlVolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/sSom.png")));
        }
        jlVolume.setText(jsVolume.getValue() + "%");
    }

    public void setVolumeSystem(int valor) {
//        BigDecimal vol = BigDecimal.valueOf(valor);
//        BigDecimal perc = BigDecimal.valueOf(100);
//        BigDecimal result = vol.divide(perc, 2, RoundingMode.HALF_EVEN);
//        player.volume.setVolumeLevel(1, (result.intValue()*100));
        player.volume.setVolumeLevel(1, jsVolume.getValue());
        jsVolume.setValue(valor);
        setaIconVolume();
    }

    public void setVolume(int valor) {
        jsVolume.setValue(valor);
    }

    public void setProgresso(int valorMaximo, int valor) {
        jsProgresso.setMaximum(valorMaximo);
        jsProgresso.setValue(valor);
    }

    public void setTempoDecorrido(String tempo) {
        jlProgresso.setText(tempo);
    }

    public void setSelectedRow(int posicao) {
        jtMusicasExecucao.changeSelection(posicao, 0, false, false);
    }

    public void procuraMusica() {
        modeloTabela.removeAllElements();
        String campo = (String) jlMenu.getSelectedValue();
        try {
            String contPesquisa = jtfPesquisa.getText();
            List<Musica> result;
            if (contPesquisa.equals("")) {
                result = MusicaDAO.listaTodos();
                for (int i = 0; i < result.size(); i++) {
                    Musica musica = result.get(i);
                    modeloTabela.addObjeto(musica);
                }
            } else if (campo.equals(" + Musicas") || campo.equals(" - Musicas")) {
                result = MusicaDAO.localizar("nome", contPesquisa);
                if (result.size() > 0) {
                    for (int i = 0; i < result.size(); i++) {
                        Musica musica = result.get(i);
                        modeloTabela.addObjeto(musica);
                    }
                }
            } else if (campo.equals("   Por Titulo")) {
                result = MusicaDAO.localizar("titulo", contPesquisa);
                if (result.size() > 0) {
                    for (int i = 0; i < result.size(); i++) {
                        Musica musica = result.get(i);
                        modeloTabela.addObjeto(musica);
                    }
                }
            } else if (campo.equals("   Por Artista")) {
                result = MusicaDAO.localizar("artista", contPesquisa);
                if (result.size() > 0) {
                    for (int i = 0; i < result.size(); i++) {
                        Musica musica = result.get(i);
                        modeloTabela.addObjeto(musica);
                    }
                }
            } else if (campo.equals("   Por Album")) {
                result = MusicaDAO.localizar("album", contPesquisa);
                if (result.size() > 0) {
                    for (int i = 0; i < result.size(); i++) {
                        Musica musica = result.get(i);
                        modeloTabela.addObjeto(musica);
                    }
                }
            }
        } catch (Exception e) {
        }
        jtMusicas.updateUI();
    }

    public void procuraAlbum() {
        modeloTabelaAlbuns.removeAllElements();
        try {
            String contPesquisa = jtfPesquisa.getText();
            List<Album> result;
            if (contPesquisa.equals("")) {
                result = AlbumDAO.listaTodos();
                for (int i = 0; i < result.size(); i++) {
                    Album album = result.get(i);
                    modeloTabelaAlbuns.addObjeto(album);
                }
            } else {
                result = AlbumDAO.localizar("titulo", contPesquisa);
                if (result.size() > 0) {
                    for (int i = 0; i < result.size(); i++) {
                        Album album = result.get(i);
                        modeloTabelaAlbuns.addObjeto(album);
                    }
                }
            }
        } catch (Exception e) {
        }
        jtMusicas.updateUI();
    }

    public void carregaMenu() {
        modeloList.clear();
        if (biblioteca) {
            modeloList.addElement(" + Biblioteca");
            modeloList.addElement("         ");
        } else {
            modeloList.addElement(" - Biblioteca");
            modeloList.addElement("         ");
            if (listas) {
                modeloList.addElement(" - Listas de Reprodução");
                carregaPlayLists();
                modeloList.addElement("         ");
            } else {
                modeloList.addElement(" + Listas de Reprodução");
                modeloList.addElement("         ");
            }
            if (musicas) {
                modeloList.addElement(" - Musicas");
                modeloList.addElement("   Por Titulo");
                modeloList.addElement("   Por Album");
                modeloList.addElement("   Por Artista");
//                modeloList.addElement("   Por Classificação");
            } else {
                modeloList.addElement(" + Musicas");
            }
            modeloList.addElement("         ");
            modeloList.addElement(" - Albuns");
        }
    }

    public void atualizaMenu(int nroClicks) {
        int posicaoMusicaMais = modeloList.indexOf(" + Musicas");
        int posicaoMusicaMenos = modeloList.indexOf(" - Musicas");
        int posicaoListasMais = modeloList.indexOf(" + Listas de Reprodução");
        int posicaoListasMenos = modeloList.indexOf(" - Listas de Reprodução");
        int posicaoSelecionada = jlMenu.getSelectedIndex();
        if (nroClicks == 2) {
            if (posicaoSelecionada == 0) {
                modeloList.clear();
                if (biblioteca) {
                    modeloList.addElement(" + Biblioteca");
                    biblioteca = false;
                } else {
                    modeloList.addElement(" - Biblioteca");
                    modeloList.addElement("         ");
                    biblioteca = true;
                    if (listas) {
                        modeloList.addElement(" - Listas de Reprodução");
                        carregaPlayLists();
                        modeloList.addElement("         ");
                    } else {
                        modeloList.addElement(" + Listas de Reprodução");
                        modeloList.addElement("         ");
                    }
                    if (musicas) {
                        modeloList.addElement(" - Musicas");
                        modeloList.addElement("   Por Titulo");
                        modeloList.addElement("   Por Album");
                        modeloList.addElement("   Por Artista");
                    } else {
                        modeloList.addElement(" + Musicas");
                    }
                    modeloList.addElement("         ");
                    modeloList.addElement(" - Albuns");
                }
                jlMenu.setSelectedIndex(0);
            }
            if ((posicaoSelecionada == posicaoListasMais) || (posicaoSelecionada == posicaoListasMenos)) {
                modeloList.clear();
                modeloList.addElement(" - Biblioteca");
                modeloList.addElement("         ");
                if (listas) {
                    modeloList.addElement(" + Listas de Reprodução");
                    listas = false;
                    modeloList.addElement("         ");
                } else {
                    modeloList.addElement(" - Listas de Reprodução");
                    carregaPlayLists();
                    modeloList.addElement("         ");
                    listas = true;
                }
                if (musicas) {
                    modeloList.addElement(" - Musicas");
                    modeloList.addElement("   Por Titulo");
                    modeloList.addElement("   Por Album");
                    modeloList.addElement("   Por Artista");
                } else {
                    modeloList.addElement(" + Musicas");
                }
                if (listas) {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" - Listas de Reprodução"));
                } else {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" + Listas de Reprodução"));
                }
                modeloList.addElement("         ");
                modeloList.addElement(" - Albuns");
            }
            if ((posicaoSelecionada == posicaoMusicaMais) || (posicaoSelecionada == posicaoMusicaMenos)) {
                modeloList.clear();
                modeloList.addElement(" - Biblioteca");
                modeloList.addElement("         ");
                if (listas) {
                    modeloList.addElement(" - Listas de Reprodução");
                    carregaPlayLists();
                    modeloList.addElement("         ");
                } else {
                    modeloList.addElement(" + Listas de Reprodução");
                    modeloList.addElement("         ");
                }
                if (musicas) {
                    modeloList.addElement(" + Musicas");
                    musicas = false;
                } else {
                    modeloList.addElement(" - Musicas");
                    modeloList.addElement("   Por Titulo");
                    modeloList.addElement("   Por Album");
                    modeloList.addElement("   Por Artista");
                    musicas = true;
                }
                if (musicas) {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" - Musicas"));
                } else {
                    jlMenu.setSelectedIndex(modeloList.indexOf(" + Musicas"));
                }
                modeloList.addElement("         ");
                modeloList.addElement(" - Albuns");
            }
            if (jlMenu.getSelectedValue().equals(" - Albuns") && (!MusicaDAO.servidorVazio())) {
                List<Album> temp = AlbumDAO.listaTodos();
                modeloTabelaAlbuns.setListaObjetos(temp);
                jtMusicas.setModel(modeloTabelaAlbuns);
                jtMusicas.updateUI();
            }
        } else {
            if (nroClicks == 1) {
                if (MusicaDAO.servidorVazio()) {
                } else {
                    if (((posicaoSelecionada > posicaoListasMais) && (posicaoSelecionada > posicaoListasMenos))
                            && ((posicaoSelecionada < posicaoMusicaMais - 1) || (posicaoSelecionada < posicaoMusicaMenos - 1))) {
                        String entrada = null, saida = "";
                        entrada = (String) jlMenu.getSelectedValue();
                        int caracteres = entrada.length();
                        char[] a = entrada.toCharArray();
                        for (int i = 0; i < caracteres; i++) {
                            if (i >= 3) {
                                saida = saida + a[i];
                            }
                        }
                        carregaDaPlayList(saida);
                    } else {
                        if (!MusicaDAO.servidorVazio()) {
                            if (jlMenu.getSelectedValue().equals(" + Musicas") || jlMenu.getSelectedValue().equals(" - Musicas")) {
                                List<Musica> temp = MusicaDAO.listaTodos();
                                modeloTabela.setListaObjetos(temp);
                                jtMusicas.setModel(modeloTabela);
                            }
                            if (jlMenu.getSelectedValue().equals("   Por Titulo")) {
                                List<Musica> temp = MusicaDAO.listaTodosPorTitulo();
                                modeloTabela.setListaObjetos(temp);
                                jtMusicas.setModel(modeloTabela);
                            }
                            if (jlMenu.getSelectedValue().equals("   Por Album")) {
                                List<Musica> temp = MusicaDAO.listaTodosPorAlbum();
                                modeloTabela.setListaObjetos(temp);
                                jtMusicas.setModel(modeloTabela);
                            }
                            if (jlMenu.getSelectedValue().equals("   Por Artista")) {
                                List<Musica> temp = MusicaDAO.listaTodosPorArtista();
                                modeloTabela.setListaObjetos(temp);
                                jtMusicas.setModel(modeloTabela);
                            }
                        }
                        jtMusicas.updateUI();
                    }
                }
            }
        }
    }

    public void carregaDaPlayList(String nome) {
        PlayList playList = ListaDAO.buscaPorNome(nome);
        modeloTabela = new GTableModel();
        jtMusicas.setModel(modeloTabela);
        List<String> ids = playList.getMusicaIds();
        Musica m2 = null;
        int id = 0;
        for (int i = 0; i < ids.size(); i++) {
            id = Integer.parseInt(ids.get(i));
            m2 = MusicaDAO.localizar(id);
            if (!m2.equals(null)) {
                modeloTabela.addObjeto(m2);
            }
        }
        jtMusicas.updateUI();
        if (player.isExecutando()) {
        } else {
            if (modeloExecucao.getRowCount() > 0) {
                modeloExecucao.removeAllElements();
            }

            modeloExecucao.setListaObjetos(modeloTabela.getListaObjetos());
            player.addListaMusicas(modeloTabela.getListaObjetos());

            player.listaExecutando = playList;
            jtfNomeLista.setText(playList.getTitulo());
            calculoInfoPlayList();
            jtMusicasExecucao.updateUI();
        }
    }

    public void playListAnterior() {

    }

    public void carregaPlayLists() {
        int quant = ListaDAO.codigoPlayListMaisMais();
        if (quant > 1) {
            List<PlayList> playLists = ListaDAO.listaTodos();
            for (int i = 0; i < playLists.size(); i++) {
                PlayList playList = playLists.get(i);
                modeloList.addElement("   " + playList.getTitulo());
            }
        }
    }

    public void calculoInfoPlayList() {
        int quant = modeloExecucao.getRowCount();
        List<Musica> itens = modeloExecucao.getListaObjetos();
        String seila = "0";
        Long tempoTotal = Long.parseLong(seila);
        for (int i = 0; i < itens.size(); i++) {
            Musica musica = itens.get(i);
            tempoTotal = tempoTotal + musica.getTempo().longValue();
        }
        String tt = Tempo.transfomaTempo(tempoTotal);
        jlPlayListInfo.setText(quant + " itens / " + tt + " ");
    }

    public void excluiPlayList() {
        int posicaoMusicaMais = modeloList.indexOf(" + Musicas");
        int posicaoMusicaMenos = modeloList.indexOf(" - Musicas");
        int posicaoListasMais = modeloList.indexOf(" + Listas de Reprodução");
        int posicaoListasMenos = modeloList.indexOf(" - Listas de Reprodução");
        int posicaoSelecionada = jlMenu.getSelectedIndex();
        if (((posicaoSelecionada > posicaoListasMais) && (posicaoSelecionada > posicaoListasMenos))
                && ((posicaoSelecionada < posicaoMusicaMais - 1) || (posicaoSelecionada < posicaoMusicaMenos - 1))) {
            String entrada = null, saida = "";
            entrada = (String) jlMenu.getSelectedValue();
            int caracteres = entrada.length();
            char[] a = entrada.toCharArray();
            for (int i = 0; i < caracteres; i++) {
                if (i >= 3) {
                    saida = saida + a[i];
                }
            }
            PlayList playList = ListaDAO.buscaPorNome(saida);
            if (!playList.equals(null)) {
                if (jtfNomeLista.getText().equals(playList.getTitulo())) {
                    jtfNomeLista.setText("Sem Nome");
                    player.listaExecutando = null;
                }
                ListaDAO.excluir(playList);
            }
            carregaMenu();
        }
    }

    private void limparPlayList() {
        if (player.isExecutando()) {
            player.stop();
        }
        if (modeloLista.getSize() != 0) {
            modeloLista.removeAllElements();
        }
        if (modeloTabela.getRowCount() != 0) {
            modeloExecucao.removeAllElements();
            jtMusicasExecucao.updateUI();
        }
        player.limpaPlayList();
        jtfNomeLista.setText("PlayList em Execuçao");
        jlPlayListInfo.setText("");
    }

    public void AddMusicasSelecionadas() {
        boolean igual = false;
        if (modeloTabela.getRowCount() > 0) {
            int[] selecao = jtMusicas.getSelectedRows();
            for (int i = 0; i < selecao.length; i++) {
                int posicao = selecao[i];
                Musica musica = modeloTabela.getObjeto(posicao);
                if (modeloExecucao.getRowCount() != 0) {
                    for (int j = 0; j < modeloExecucao.getListaObjetos().size(); j++) {
                        Musica musica1 = modeloExecucao.getListaObjetos().get(j);
                        if (musica.getCodigo() == musica1.getCodigo()) {
                            igual = true;
                        }
                    }
                }
                if (igual) {

                } else {
                    modeloExecucao.addObjeto(musica);
                    player.addMusica(musica);
                    jtfNomeLista.setText("Sem Nome");
                    jtMusicasExecucao.updateUI();
                    calculoInfoPlayList();
                }
            }
            jtMusicas.clearSelection();
            jtMusicasExecucao.updateUI();
        }
    }

    public void setIconPause() {
        jbPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/pause.png")));
    }

    public void setIconPlay() {
        jbPlayPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/icones/play.png")));
    }

    public void addMusicaNaTabela(Musica musica) {
        modeloTabela.addObjeto(musica);
    }
}
