/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AudioPane.java
 *
 * Created on 18/02/2010, 16:28:19
 */

package visao.panels;

import controle.MediaPlayer;
import javax.swing.JComboBox;

/**
 *
 * @author Idair F. Guido
 */
public class AudioPane extends javax.swing.JPanel {
    private MediaPlayer player;
//      implements ActionListener, ItemListener,
//						  ChangeListener, PropertyChangeListener

//    private AudioBase[] audio = new AudioBase[1];

    /** Creates new form AudioPane */
    public AudioPane(MediaPlayer player) {
        this.player = player;
        initComponents();
        carregaConfig();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jlNomePortal = new javax.swing.JLabel();
        jcbMixers = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jlNivel = new javax.swing.JLabel();
        jpbNivel = new javax.swing.JProgressBar();
        jlControl = new javax.swing.JLabel();
        jsControle = new javax.swing.JSlider();
        jSeparator3 = new javax.swing.JSeparator();
        jlTBuffer = new javax.swing.JLabel();
        jcbTBuffer = new javax.swing.JComboBox();
        jcbPortas = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Configuração de Audio");

        jlNomePortal.setText("Nome da Porta");

        jcbMixers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Mixer:");

        jlNivel.setText("Nivel:");

        jlControl.setText("Controle:");

        jlTBuffer.setText("Tamanho do Buffer em millisegundos:");

        jcbTBuffer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcbPortas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlNomePortal)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlNivel)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlControl)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlTBuffer)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jcbTBuffer, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jsControle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpbNivel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbMixers, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addComponent(jcbPortas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlNomePortal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMixers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlNivel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpbNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlControl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsControle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbPortas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlTBuffer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbTBuffer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JComboBox jcbMixers;
    private javax.swing.JComboBox jcbPortas;
    private javax.swing.JComboBox jcbTBuffer;
    private javax.swing.JLabel jlControl;
    private javax.swing.JLabel jlNivel;
    private javax.swing.JLabel jlNomePortal;
    private javax.swing.JLabel jlTBuffer;
    private javax.swing.JProgressBar jpbNivel;
    private javax.swing.JSlider jsControle;
    // End of variables declaration//GEN-END:variables

    private void carregaConfig() {
//        jcbMixers = new JComboBox(player.volume.getMixers(1).toArray());
//	jcbMixers.addItemListener(this);

//        jsControle.setMinimum(0);
//        jsControle.setMaximum(100);
//        int valor = player.volume.getVolumeLevel(1);
//        jsControle.setValue(valor);
    }
//
//    private AudioSistem getAudioSettings() {
//    	return player.volume;
//    }
//
//    private void initNewPort(int d) {
//	int pIndex = getAudioSettings().getSelPortIndex(1);
//	Port port = getAudioSettings().getSelPort(1);
//	FloatControl c = getAudioSettings().getSelVolControl(1);
//	jsControle.setEnabled(port != null && c != null);
//	updateVolumeSlider(1);
//	if (jcbPortas.getSelectedIndex() != pIndex) {
//		jcbPortas.setSelectedIndex(pIndex);
//	}
//    }
//
//    private void updateVolumeSlider(int d) {
//	if (jsControle.isEnabled()) {
//	    int newPos = getAudioSettings().getVolumeLevel(d);
//	    if (newPos != jsControle.getValue()) {
//		jsControle.setValue(newPos);
//		//if (VERBOSE) out("Setting slider to: "+newPos);
//	    }
//	}
//    }
//
//    private void updateVolume(int d) {
//	if (jsControle.isEnabled()) {
//	    getAudioSettings().setVolumeLevel(d, jsControle.getValue());
//	    //if (VERBOSE) out("Setting vol: "+newVol);
//	}
//    }
//
//    private void initNewMixer(int d) {
//	try {
//	    audio[0].setMixer(getAudioSettings().getSelMixer(d));
//	} catch (Exception e) {
//	}
//    }
//
//    private void initNewBufferSize(int d) {
//	try {
//	    audio[0].setBufferSizeMillis(getAudioSettings().getBufferSizeMillis(d));
//	} catch (Exception e) {
//	}
//    }
//
//    public void itemStateChanged(ItemEvent e) {
//	int d = -1;
////	if (e.getSource() == volumePort[0]) {
////	    d = 0;
////	} else
//        if (e.getSource() == jsControle) {
//	    d = 1;
//	}
//	if ((d >= 0) && (e.getStateChange() == ItemEvent.SELECTED)) {
//	    getAudioSettings().setSelPort(d, jcbPortas.getSelectedIndex());
//	    initNewPort(d);
//	    return;
//	}
//	d = -1;
////	if (e.getSource() == jcbMixers) {
////	    d = 0;
////	} else
//        if (e.getSource() == jcbMixers) {
//	    d = 1;
//	}
//	if ((d >= 0) && (e.getStateChange() == ItemEvent.SELECTED)) {
//	    getAudioSettings().setSelMixer(d, jcbMixers.getSelectedIndex());
//	    initNewMixer(d);
//	    return;
//	}
//	d = -1;
////	if (e.getSource() ==jcbTBuffer) {
////	    d = 0;
////	} else
//        if (e.getSource() == jcbTBuffer) {
//	    d = 1;
//	}
//	if ((d >= 0) && (e.getStateChange() == ItemEvent.SELECTED)) {
//	    getAudioSettings().setBufferSizeIndex(d, jcbTBuffer.getSelectedIndex());
//	    initNewBufferSize(d);
//	    return;
//	}
//    }
//
//    public void stateChanged(ChangeEvent e) {
////	int d;
////	if (e.getSource() == jsControle) {
////	    d = 0;
////	} else
////        if (e.getSource() == jsControle) {
////	    d = 1;
////	} else {
////		if (e.getSource() instanceof JTabbedPane) {
////			if (((JTabbedPane) e.getSource()).getSelectedComponent() == this) {
////				 Selected
////				getRadioModel().addStatusListener(this);
////				initNewPort(0);
////				initNewPort(1);
////			} else {
////				 Unselected
////				getRadioModel().removeStatusListener(this);
////			}
////		}
////	    return;
////	}
////	updateVolume(d);
//    }
//
//    public void actionPerformed(ActionEvent e) {
//    }
//
//    public void propertyChange(PropertyChangeEvent e) {
////	boolean newValue = ((Boolean) e.getNewValue()).booleanValue();
////	if (DEBUG) out("Property change '"+e.getPropertyName()+"="+e.getNewValue()+"'. "
////		       +" AudioActive:"+getRadioModel().isAudioActive()
////		       +" Started:"+getRadioModel().isStarted()
////		       +" Connected:"+getRadioModel().isConnected());
//
//    }
//
//    public void displayStatus(int inLevel, int outLevel) {
////	    volumeMeter[DIR_MIC].setValue(inLevel);
////	    volumeMeter[DIR_SPK].setValue(outLevel);
//    }

}
